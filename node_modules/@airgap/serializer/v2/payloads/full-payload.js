"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullPayload = void 0;
var bs58check = __importStar(require("@airgap/coinlib-core/dependencies/src/bs58check-2.1.2/index"));
var rlp = __importStar(require("@airgap/coinlib-core/dependencies/src/rlp-2.2.3/index"));
var message_1 = require("../message");
var serializer_1 = require("../serializer");
var FullPayload = /** @class */ (function () {
    function FullPayload(messages) {
        this.messages = messages;
    }
    FullPayload.fromDecoded = function (object) {
        return new FullPayload(object);
    };
    FullPayload.fromEncoded = function (buf, serializer) {
        if (serializer === void 0) { serializer = serializer_1.Serializer.getInstance(); }
        var messages = buf.map(function (buffer) { return message_1.Message.fromEncoded(buffer, serializer).asJson(); });
        return new FullPayload(messages);
    };
    FullPayload.prototype.asJson = function () {
        return this.messages;
    };
    FullPayload.prototype.asArray = function (serializer) {
        if (serializer === void 0) { serializer = serializer_1.Serializer.getInstance(); }
        return this.messages.map(function (message) { return message_1.Message.fromDecoded(message, serializer).asArray(); });
    };
    FullPayload.prototype.asBuffer = function (serializer) {
        if (serializer === void 0) { serializer = serializer_1.Serializer.getInstance(); }
        return rlp.encode(this.asArray(serializer));
    };
    FullPayload.prototype.asString = function (serializer) {
        if (serializer === void 0) { serializer = serializer_1.Serializer.getInstance(); }
        return bs58check.encode(this.asBuffer(serializer));
    };
    return FullPayload;
}());
exports.FullPayload = FullPayload;
//# sourceMappingURL=full-payload.js.map