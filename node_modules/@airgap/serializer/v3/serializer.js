"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerializerV3 = void 0;
var errors_1 = require("@airgap/coinlib-core/errors");
var ProtocolSymbols_1 = require("@airgap/coinlib-core/utils/ProtocolSymbols");
var iac_message_wrapper_1 = require("./iac-message-wrapper");
var interfaces_1 = require("./interfaces");
var accountShareResponse = require('./schemas/generated/account-share-response.json');
var messageSignRequest = require('./schemas/generated/message-sign-request.json');
var messageSignResponse = require('./schemas/generated/message-sign-response.json');
var SerializerV3 = /** @class */ (function () {
    function SerializerV3() {
        this.schemas = new Map();
        this.validators = new Map();
        this.supportedProtocols = new Set();
        this.addSchema(interfaces_1.IACMessageType.AccountShareResponse, { schema: accountShareResponse });
        this.addSchema(interfaces_1.IACMessageType.MessageSignRequest, { schema: messageSignRequest });
        this.addSchema(interfaces_1.IACMessageType.MessageSignResponse, { schema: messageSignResponse });
    }
    SerializerV3.getInstance = function () {
        if (SerializerV3.instance === undefined) {
            SerializerV3.instance = new SerializerV3();
        }
        return SerializerV3.instance;
    };
    SerializerV3.addSchema = function (schemaId, schema, protocol) {
        SerializerV3.getInstance().addSchema(schemaId, schema, protocol);
    };
    SerializerV3.prototype.addSchema = function (schemaId, schema, protocol) {
        var _a;
        var protocolSpecificSchemaName = SerializerV3.getSchemaName(schemaId, protocol);
        var schemas = (_a = this.schemas.get(protocolSpecificSchemaName)) !== null && _a !== void 0 ? _a : [];
        if (schemas.some(function (el) { return el.schema === schema.schema; })) {
            throw new errors_1.SerializerError(errors_1.SerializerErrorType.SCHEMA_ALREADY_EXISTS, "Schema ".concat(protocolSpecificSchemaName, " already exists"));
        }
        schemas.push(schema);
        this.schemas.set(protocolSpecificSchemaName, schemas);
        if (protocol) {
            this.supportedProtocols.add(protocol);
        }
    };
    SerializerV3.getSchemas = function (schemaId, protocol) {
        return SerializerV3.getInstance().getSchemas(schemaId, protocol);
    };
    SerializerV3.prototype.getSchemas = function (schemaId, protocol) {
        var protocolSpecificSchemaName = SerializerV3.getSchemaName(schemaId, protocol);
        var schemas;
        if (this.schemas.has(protocolSpecificSchemaName)) {
            schemas = this.schemas.get(protocolSpecificSchemaName);
        }
        else if (protocol !== undefined) {
            var split = protocol.split('-');
            // if protocol is a sub protocol and there is no schema defined for it, use the main protocol schema as the fallback
            if (split.length >= 2) {
                return this.getSchemas(schemaId, split[0]);
            }
        }
        // Try to get the protocol specific scheme, if it doesn't exist fall back to the generic one
        schemas = schemas !== undefined && schemas.length > 0 ? schemas : this.schemas.get(SerializerV3.getSchemaName(schemaId));
        if (!schemas) {
            throw new errors_1.SerializerError(errors_1.SerializerErrorType.SCHEMA_DOES_NOT_EXISTS, "Schema ".concat(protocolSpecificSchemaName, " does not exist"));
        }
        return schemas;
    };
    SerializerV3.getSchemaName = function (schemaId, protocol) {
        var schemaName = "".concat(schemaId, "-").concat(protocol);
        if ((protocol !== undefined && schemaId === interfaces_1.IACMessageType.TransactionSignRequest) ||
            schemaId === interfaces_1.IACMessageType.TransactionSignResponse) {
            var split = schemaName.split('-');
            if (split.length >= 3 && "".concat(split[1], "-").concat(split[2]) === ProtocolSymbols_1.SubProtocolSymbols.ETH_ERC20) {
                return "".concat(schemaId, "-").concat(ProtocolSymbols_1.SubProtocolSymbols.ETH_ERC20);
            }
        }
        return protocol ? "".concat(schemaId, "-").concat(protocol) : schemaId.toString();
    };
    SerializerV3.addValidator = function (protocol, validator) {
        SerializerV3.getInstance().addValidator(protocol, validator);
    };
    SerializerV3.prototype.addValidator = function (protocol, validator) {
        this.validators.set(protocol, validator);
    };
    SerializerV3.prototype.getSupportedProtocols = function () {
        return this.supportedProtocols;
    };
    SerializerV3.prototype.serialize = function (messages) {
        return __awaiter(this, void 0, void 0, function () {
            var iacps;
            var _this = this;
            return __generator(this, function (_a) {
                if (messages.every(function (message) {
                    return _this.getSchemas(message.type, message.protocol).length > 0;
                })) {
                    iacps = iac_message_wrapper_1.IACMessageWrapper.fromDecoded(JSON.parse(JSON.stringify(messages)));
                    return [2 /*return*/, iacps.encoded(this)];
                }
                else {
                    throw new errors_1.SerializerError(errors_1.SerializerErrorType.SCHEMA_DOES_NOT_EXISTS, "Unknown schema");
                }
                return [2 /*return*/];
            });
        });
    };
    SerializerV3.prototype.deserialize = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var result, deserializedIACMessageDefinitionObjects;
            return __generator(this, function (_a) {
                try {
                    result = iac_message_wrapper_1.IACMessageWrapper.fromEncoded(data, this);
                }
                catch (_b) {
                    throw new Error('Cannot decode data');
                }
                deserializedIACMessageDefinitionObjects = result.payload.asJson();
                return [2 /*return*/, deserializedIACMessageDefinitionObjects];
            });
        });
    };
    SerializerV3.prototype.serializationValidatorByProtocolIdentifier = function (protocolIdentifier) {
        var _a;
        var validatorsKeys = Array.from(this.validators.keys());
        var exactMatch = validatorsKeys.find(function (protocol) { return protocolIdentifier === protocol; });
        var startsWith = validatorsKeys.find(function (protocol) { return protocolIdentifier.startsWith(protocol); });
        // TODO: Only use validator if it's a transaction
        var validatorFactory = this.validators.get((_a = exactMatch !== null && exactMatch !== void 0 ? exactMatch : startsWith) !== null && _a !== void 0 ? _a : ProtocolSymbols_1.MainProtocolSymbols.ETH);
        if (!validatorFactory) {
            throw Error("Validator not registered for ".concat(protocolIdentifier, ", ").concat(exactMatch, ", ").concat(startsWith, ", ").concat(validatorFactory));
        }
        return validatorFactory.create();
    };
    SerializerV3.instance = undefined;
    return SerializerV3;
}());
exports.SerializerV3 = SerializerV3;
//# sourceMappingURL=serializer.js.map