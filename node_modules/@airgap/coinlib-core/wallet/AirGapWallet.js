"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirGapWallet = exports.AirGapWalletStatus = void 0;
var errors_1 = require("../errors");
var coinlib_error_1 = require("../errors/coinlib-error");
var ProtocolSymbols_1 = require("../utils/ProtocolSymbols");
var AirGapWalletStatus;
(function (AirGapWalletStatus) {
    AirGapWalletStatus["ACTIVE"] = "active";
    AirGapWalletStatus["HIDDEN"] = "hidden";
    AirGapWalletStatus["DELETED"] = "deleted";
    AirGapWalletStatus["TRANSIENT"] = "transient";
})(AirGapWalletStatus = exports.AirGapWalletStatus || (exports.AirGapWalletStatus = {}));
var AirGapWallet = /** @class */ (function () {
    function AirGapWallet(protocol, publicKey, isExtendedPublicKey, derivationPath, masterFingerprint, status, addressIndex) {
        this.protocol = protocol;
        this.publicKey = publicKey;
        this.isExtendedPublicKey = isExtendedPublicKey;
        this.derivationPath = derivationPath;
        this.masterFingerprint = masterFingerprint;
        this.status = status;
        this.addressIndex = addressIndex;
        this.addresses = []; // used for cache
    }
    Object.defineProperty(AirGapWallet.prototype, "receivingPublicAddress", {
        get: function () {
            return this.addresses[this.addressIndex !== undefined ? this.addressIndex : 0];
        },
        enumerable: false,
        configurable: true
    });
    AirGapWallet.prototype.setProtocol = function (protocol) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.protocol.getIdentifier()];
                    case 1:
                        _a = (_b.sent());
                        return [4 /*yield*/, protocol.getIdentifier()];
                    case 2:
                        if (_a !== (_b.sent())) {
                            throw new errors_1.ConditionViolationError(coinlib_error_1.Domain.WALLET, 'Can only set same protocol with a different network');
                        }
                        this.protocol = protocol;
                        return [2 /*return*/];
                }
            });
        });
    };
    AirGapWallet.prototype.deriveAddresses = function (amount) {
        if (amount === void 0) { amount = 50; }
        return __awaiter(this, void 0, void 0, function () {
            var addresses, protocolIdentifier_1, multipleDerivationProtocols, multipleDerivation, parts, offset, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isExtendedPublicKey) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.protocol.getIdentifier()
                            // TODO: configure it on the protocol level
                        ];
                    case 1:
                        protocolIdentifier_1 = _b.sent();
                        multipleDerivationProtocols = [ProtocolSymbols_1.MainProtocolSymbols.BTC, ProtocolSymbols_1.MainProtocolSymbols.BTC_SEGWIT, ProtocolSymbols_1.MainProtocolSymbols.GRS];
                        multipleDerivation = multipleDerivationProtocols.some(function (protocolSymbol) {
                            return protocolIdentifier_1.startsWith(protocolSymbol);
                        });
                        parts = this.derivationPath.split('/');
                        offset = 0;
                        if (!parts[parts.length - 1].endsWith("'")) {
                            offset = Number.parseInt(parts[parts.length - 1], 10);
                        }
                        if (!multipleDerivation) return [3 /*break*/, 3];
                        return [4 /*yield*/, Promise.all([
                                this.protocol.getAddressesFromExtendedPublicKey(this.publicKey, 0, amount, offset),
                                this.protocol.getAddressesFromExtendedPublicKey(this.publicKey, 1, amount, offset)
                            ])];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.protocol.getAddressesFromExtendedPublicKey(this.publicKey, 0, 1, offset)];
                    case 4:
                        _a = [_b.sent()];
                        _b.label = 5;
                    case 5:
                        addresses = (_a).reduce(function (flatten, next) { return flatten.concat(next); }, []);
                        return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, this.protocol.getAddressesFromPublicKey(this.publicKey)];
                    case 7:
                        addresses = _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/, addresses.map(function (address) { return address.address; })];
                }
            });
        });
    };
    AirGapWallet.prototype.toJSON = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {};
                        return [4 /*yield*/, this.protocol.getIdentifier()];
                    case 1:
                        _a.protocolIdentifier = _b.sent();
                        return [4 /*yield*/, this.protocol.getOptions()];
                    case 2: return [2 /*return*/, (_a.networkIdentifier = (_b.sent()).network.identifier,
                            _a.publicKey = this.publicKey,
                            _a.isExtendedPublicKey = this.isExtendedPublicKey,
                            _a.derivationPath = this.derivationPath,
                            _a.addresses = this.addresses,
                            _a.masterFingerprint = this.masterFingerprint,
                            _a.status = this.status,
                            _a.addressIndex = this.addressIndex,
                            _a)];
                }
            });
        });
    };
    return AirGapWallet;
}());
exports.AirGapWallet = AirGapWallet;
//# sourceMappingURL=AirGapWallet.js.map