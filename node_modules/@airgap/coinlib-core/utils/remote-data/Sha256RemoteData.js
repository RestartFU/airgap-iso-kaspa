"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sha256RemoteData = void 0;
var index_1 = __importDefault(require("../../dependencies/src/axios-0.19.0/index"));
var sha = require("../../dependencies/src/sha.js-2.4.11/index");
var hex_1 = require("../hex");
var RemoteData_1 = require("./RemoteData");
var SHA256_SCHEME = 'sha256';
function parseUri(uri) {
    var _a = uri.replace("".concat(SHA256_SCHEME, "://"), '').split(/\/(.+)/, 2), hash = _a[0], path = _a[1];
    return { hash: hash, path: path };
}
var Sha256RemoteData = /** @class */ (function (_super) {
    __extends(Sha256RemoteData, _super);
    function Sha256RemoteData(uri, hash, path) {
        var _this = _super.call(this, uri) || this;
        _this.hash = hash;
        _this.path = path;
        return _this;
    }
    Sha256RemoteData.from = function (uri) {
        if (!Sha256RemoteData.validate(uri)) {
            return undefined;
        }
        var _a = parseUri(uri), hash = _a.hash, path = _a.path;
        if (!hash || !path) {
            return undefined;
        }
        return new Sha256RemoteData(uri, Buffer.from((0, hex_1.stripHexPrefix)(hash), 'hex'), decodeURIComponent(path));
    };
    Sha256RemoteData.validate = function (uri) {
        if (!uri.startsWith(SHA256_SCHEME)) {
            return false;
        }
        var _a = parseUri(uri), hash = _a.hash, path = _a.path;
        var validHash = !!hash && hash.startsWith('0x');
        var validPath = !!path;
        return validHash && validPath;
    };
    Sha256RemoteData.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, decoder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRaw()];
                    case 1:
                        data = _a.sent();
                        if (data === undefined) {
                            return [2 /*return*/, undefined];
                        }
                        decoder = new TextDecoder();
                        return [2 /*return*/, JSON.parse(decoder.decode(data.bytes.buffer))];
                }
            });
        });
    };
    Sha256RemoteData.prototype.getRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, data, hash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!Sha256RemoteData.validate(this.uri)) {
                            return [2 /*return*/, undefined];
                        }
                        return [4 /*yield*/, index_1.default.get(this.path, { responseType: 'arraybuffer' })];
                    case 1:
                        response = _a.sent();
                        data = response.data;
                        hash = sha('sha256').update(data).digest();
                        if (!this.hash.equals(hash)) {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, {
                                bytes: Buffer.from(data),
                                contentType: response.headers['content-type']
                            }];
                }
            });
        });
    };
    return Sha256RemoteData;
}(RemoteData_1.RemoteData));
exports.Sha256RemoteData = Sha256RemoteData;
//# sourceMappingURL=Sha256RemoteData.js.map