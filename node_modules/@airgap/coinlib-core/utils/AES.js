"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AES = void 0;
var crypto = __importStar(require("crypto"));
var errors_1 = require("../errors");
var coinlib_error_1 = require("../errors/coinlib-error");
var hex_1 = require("./hex");
// https://github.com/microsoft/botbuilder-js/blob/master/libraries/botframework-config/src/encrypt.ts#L20
var AES = /** @class */ (function () {
    function AES(AES_KEY_SIZE, KEY_DERIVATION_ITERATION_COUNT, ALGORITHM, encoding) {
        if (AES_KEY_SIZE === void 0) { AES_KEY_SIZE = 256; }
        if (KEY_DERIVATION_ITERATION_COUNT === void 0) { KEY_DERIVATION_ITERATION_COUNT = 10000; }
        if (ALGORITHM === void 0) { ALGORITHM = 'aes-256-gcm'; }
        if (encoding === void 0) { encoding = 'hex'; }
        this.AES_KEY_SIZE = AES_KEY_SIZE;
        this.KEY_DERIVATION_ITERATION_COUNT = KEY_DERIVATION_ITERATION_COUNT;
        this.ALGORITHM = ALGORITHM;
        this.encoding = encoding;
    }
    AES.prototype.encryptString = function (plainText, privateKey) {
        return __awaiter(this, void 0, void 0, function () {
            var keyBytes, ivBytes, ivText, cipher, encryptedValue, authTagText;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!plainText || plainText.length === 0) {
                            throw new errors_1.ConditionViolationError(coinlib_error_1.Domain.UTILS, 'you must pass an input message');
                        }
                        if (!privateKey || privateKey.length === 0) {
                            throw new errors_1.ConditionViolationError(coinlib_error_1.Domain.UTILS, 'you must pass a privateKey');
                        }
                        return [4 /*yield*/, this.deriveKeyFromPrivateKey(privateKey)
                            // Generates 16 byte cryptographically strong pseudo-random data as IV
                            // https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback
                        ];
                    case 1:
                        keyBytes = _a.sent();
                        ivBytes = crypto.randomBytes(16);
                        ivText = ivBytes.toString(this.encoding);
                        cipher = crypto.createCipheriv(this.ALGORITHM, keyBytes, ivBytes);
                        encryptedValue = cipher.update(plainText, 'utf8', this.encoding);
                        encryptedValue += cipher.final(this.encoding);
                        authTagText = cipher.getAuthTag().toString(this.encoding);
                        return [2 /*return*/, "".concat(ivText, "!").concat(encryptedValue, "!").concat(authTagText)];
                }
            });
        });
    };
    AES.prototype.decryptString = function (encryptedValue, privateKey) {
        return __awaiter(this, void 0, void 0, function () {
            var parts, ivText, encryptedText, authTagText, ivBytes, keyBytes, authTagBytes, decipher, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!encryptedValue || encryptedValue.length === 0) {
                            return [2 /*return*/, encryptedValue];
                        }
                        if (!privateKey || privateKey.length === 0) {
                            throw new errors_1.ConditionViolationError(coinlib_error_1.Domain.UTILS, 'you must pass a privateKey');
                        }
                        parts = encryptedValue.split('!');
                        if (parts.length !== 3) {
                            throw new errors_1.ConditionViolationError(coinlib_error_1.Domain.UTILS, 'The encrypted value is not in a valid format');
                        }
                        ivText = parts[0];
                        encryptedText = parts[1];
                        authTagText = parts[2];
                        ivBytes = Buffer.from(ivText, this.encoding);
                        return [4 /*yield*/, this.deriveKeyFromPrivateKey(privateKey)];
                    case 1:
                        keyBytes = _a.sent();
                        authTagBytes = Buffer.from(authTagText, this.encoding);
                        if (ivBytes.length !== 16) {
                            throw new errors_1.InvalidValueError(coinlib_error_1.Domain.UTILS, 'The IV length is invalid');
                        }
                        if (keyBytes.length !== 32) {
                            throw new errors_1.InvalidValueError(coinlib_error_1.Domain.UTILS, 'The key length is invalid');
                        }
                        if (authTagBytes.length !== 16) {
                            throw new errors_1.InvalidValueError(coinlib_error_1.Domain.UTILS, 'The authtag length is invalid');
                        }
                        decipher = crypto.createDecipheriv(this.ALGORITHM, keyBytes, ivBytes);
                        decipher.setAuthTag(authTagBytes);
                        value = decipher.update(encryptedText, this.encoding, 'utf8');
                        value += decipher.final('utf8');
                        return [2 /*return*/, value];
                }
            });
        });
    };
    AES.prototype.deriveKeyFromPrivateKey = function (privateKey) {
        var _this = this;
        var password = (0, hex_1.isHex)(privateKey) ? Buffer.from(privateKey, 'hex') : privateKey;
        return new Promise(function (resolve, reject) {
            crypto.pbkdf2(password, '', _this.KEY_DERIVATION_ITERATION_COUNT, 32, 'sha512', function (pbkdf2Error, key) {
                if (pbkdf2Error) {
                    reject(pbkdf2Error);
                }
                resolve(key);
            });
        });
    };
    return AES;
}());
exports.AES = AES;
//# sourceMappingURL=AES.js.map