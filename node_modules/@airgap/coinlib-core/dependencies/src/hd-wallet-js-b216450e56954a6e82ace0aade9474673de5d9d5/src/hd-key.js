"use strict";
/*
 * ISC License (ISC)
 * Copyright 2018 aeternity developers
 *
 *  Permission to use, copy, modify, and/or distribute this software for any
 *  purpose with or without fee is hereby granted, provided that the above
 *  copyright notice and this permission notice appear in all copies.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 *  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 *  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 *  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 *  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THIS SOFTWARE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.derivePathFromSeed = exports.derivePathFromKey = exports.getKeyPair = exports.deriveChild = exports.getMasterKeyFromSeed = void 0;
var nacl = __importStar(require("../../tweetnacl-1.0.1/nacl"));
var naclAuth = __importStar(require("../../tweetnacl-auth-1.0.1/nacl-auth"));
var index_1 = require("../../bip32-path-0.4.2/index");
var ED25519_CURVE = Buffer.from('ed25519 seed');
var HARDENED_OFFSET = 0x80000000;
function getMasterKeyFromSeed(seed) {
    var I = naclAuth.full(seed, ED25519_CURVE);
    var IL = I.slice(0, 32);
    var IR = I.slice(32);
    return {
        privateKey: IL,
        chainCode: IR
    };
}
exports.getMasterKeyFromSeed = getMasterKeyFromSeed;
function deriveChild(_a, index) {
    var privateKey = _a.privateKey, chainCode = _a.chainCode;
    if (index < HARDENED_OFFSET) {
        throw new Error("Child index #".concat(index, " is not supported"));
    }
    var indexBuffer = Buffer.allocUnsafe(4);
    indexBuffer.writeUInt32BE(index, 0);
    var data = Buffer.concat([
        Buffer.alloc(1, 0),
        Buffer.from(privateKey),
        Buffer.from(indexBuffer)
    ]);
    var I = naclAuth.full(data, Buffer.from(chainCode));
    var IL = I.slice(0, 32);
    var IR = I.slice(32);
    return {
        privateKey: IL,
        chainCode: IR
    };
}
exports.deriveChild = deriveChild;
function getKeyPair(privateKey) {
    return nacl.sign.keyPair.fromSeed(privateKey);
}
exports.getKeyPair = getKeyPair;
function derivePathFromKey(path, key) {
    var segments = path === '' ? [] : (0, index_1.fromString)(path).toPathArray();
    segments.forEach(function (segment, i) {
        if (segment < HARDENED_OFFSET) {
            throw new Error("Segment #".concat(i + 1, " is not hardened"));
        }
    });
    return segments.reduce(function (parentKey, segment) { return deriveChild(parentKey, segment); }, key);
}
exports.derivePathFromKey = derivePathFromKey;
function derivePathFromSeed(path, seed) {
    if (!['m', 'm/'].includes(path.slice(0, 2))) {
        throw new Error('Invalid path');
    }
    var masterKey = getMasterKeyFromSeed(seed);
    return derivePathFromKey(path.slice(2), masterKey);
}
exports.derivePathFromSeed = derivePathFromSeed;
//# sourceMappingURL=hd-key.js.map