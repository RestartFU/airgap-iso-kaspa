"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeCombPair = exports.primViewDecoderProto14 = exports.primDecoderProto14 = exports.primEncoderProto14 = exports.valueDecoderProto14 = exports.valueEncoderProto14 = exports.scriptDecoderProto14 = exports.scriptEncoderProto14 = void 0;
var uint8array_consumer_1 = require("../../uint8array-consumer");
var constants_proto14_1 = require("../constants-proto14");
var utils_1 = require("../../utils");
var error_1 = require("../../error");
var codec_1 = require("../../michelson/codec");
var scriptEncoderProto14 = function (script) {
    var code = (0, exports.valueEncoderProto14)(script.code);
    var storage = (0, exports.valueEncoderProto14)(script.storage);
    return "".concat((0, utils_1.pad)(code.length / 2, 8)).concat(code).concat((0, utils_1.pad)(storage.length / 2, 8)).concat(storage);
};
exports.scriptEncoderProto14 = scriptEncoderProto14;
var scriptDecoderProto14 = function (value) {
    var code = (0, codec_1.extractRequiredLen)(value);
    var storage = (0, codec_1.extractRequiredLen)(value);
    return {
        code: (0, exports.valueDecoderProto14)(new uint8array_consumer_1.Uint8ArrayConsumer(code)),
        storage: (0, exports.valueDecoderProto14)(new uint8array_consumer_1.Uint8ArrayConsumer(storage)),
    };
};
exports.scriptDecoderProto14 = scriptDecoderProto14;
var valueEncoderProto14 = function (value) {
    if (Array.isArray(value)) {
        var encoded = value.map(function (x) { return (0, exports.valueEncoderProto14)(x); }).join('');
        var len = encoded.length / 2;
        return "02".concat((0, utils_1.pad)(len)).concat(encoded);
    }
    else if ((0, codec_1.isPrim)(value)) {
        return (0, exports.primEncoderProto14)(value);
    }
    else if ((0, codec_1.isBytes)(value)) {
        return (0, codec_1.bytesEncoder)(value);
    }
    else if ((0, codec_1.isString)(value)) {
        return (0, codec_1.stringEncoder)(value);
    }
    else if ((0, codec_1.isInt)(value)) {
        return (0, codec_1.intEncoder)(value);
    }
    throw new error_1.UnexpectedMichelsonValueError(JSON.stringify(value));
};
exports.valueEncoderProto14 = valueEncoderProto14;
var valueDecoderProto14 = function (value) {
    var preamble = value.consume(1);
    switch (preamble[0]) {
        case 0x0a:
            return (0, codec_1.bytesDecoder)(value);
        case 0x01:
            return (0, codec_1.stringDecoder)(value);
        case 0x00:
            return (0, codec_1.intDecoder)(value);
        case 0x02: {
            var val = new uint8array_consumer_1.Uint8ArrayConsumer((0, codec_1.extractRequiredLen)(value));
            var results = [];
            while (val.length() > 0) {
                results.push((0, exports.valueDecoderProto14)(val));
            }
            return results;
        }
        default:
            return (0, exports.primDecoderProto14)(value, preamble);
    }
};
exports.valueDecoderProto14 = valueDecoderProto14;
var primEncoderProto14 = function (value) {
    var hasAnnot = +Array.isArray(value.annots);
    var argsCount = Array.isArray(value.args) ? value.args.length : 0;
    // Specify the number of args max is 3 without annotation
    var preamble = (0, utils_1.pad)(Math.min(2 * argsCount + hasAnnot + 0x03, 9), 2);
    var op = constants_proto14_1.opMappingReverseProto14[value.prim];
    var encodedArgs = (value.args || []).map(function (arg) { return (0, exports.valueEncoderProto14)(arg); }).join('');
    var encodedAnnots = Array.isArray(value.annots) ? (0, codec_1.encodeAnnots)(value.annots) : '';
    if (value.prim === 'LAMBDA' && argsCount) {
        encodedArgs = (0, utils_1.pad)(encodedArgs.length / 2) + encodedArgs + (0, utils_1.pad)(0);
    }
    if ((value.prim === 'pair' || value.prim === 'Pair') && argsCount > 2) {
        encodedArgs =
            encodedAnnots === ''
                ? (0, utils_1.pad)(encodedArgs.length / 2) + encodedArgs + (0, utils_1.pad)(0)
                : (0, utils_1.pad)(encodedArgs.length / 2) + encodedArgs;
    }
    if (value.prim === 'view' && value.args) {
        encodedArgs = (0, utils_1.pad)(encodedArgs.length / 2) + encodedArgs + (0, utils_1.pad)(0);
    }
    return "".concat(preamble).concat(op).concat(encodedArgs).concat(encodedAnnots);
};
exports.primEncoderProto14 = primEncoderProto14;
var primDecoderProto14 = function (value, preamble) {
    var hasAnnot = (preamble[0] - 0x03) % 2 === 1;
    var argsCount = Math.floor((preamble[0] - 0x03) / 2);
    var op = value.consume(1)[0].toString(16).padStart(2, '0');
    var result = {
        prim: constants_proto14_1.opMappingProto14[op],
    };
    if (constants_proto14_1.opMappingProto14[op] === 'LAMBDA') {
        value.consume(4);
    }
    if (constants_proto14_1.opMappingProto14[op] === 'view') {
        if (argsCount != 0) {
            return (0, exports.primViewDecoderProto14)(value, result);
        }
        else {
            return result;
        }
    }
    var combPairArgs;
    var combPairAnnots;
    if ((constants_proto14_1.opMappingProto14[op] === 'pair' || constants_proto14_1.opMappingProto14[op] === 'Pair') && argsCount > 2) {
        combPairArgs = (0, exports.decodeCombPair)(value);
        argsCount = 0;
        combPairAnnots = (0, codec_1.decodeAnnots)(value);
    }
    var args = new Array(argsCount).fill(0).map(function () { return (0, exports.valueDecoderProto14)(value); });
    if (constants_proto14_1.opMappingProto14[op] === 'LAMBDA') {
        value.consume(4);
    }
    if (combPairArgs) {
        result['args'] = combPairArgs;
    }
    else if (args.length) {
        result['args'] = args;
    }
    if (combPairAnnots && combPairAnnots[0] !== '') {
        result['annots'] = combPairAnnots;
    }
    else if (hasAnnot) {
        result['annots'] = (0, codec_1.decodeAnnots)(value);
    }
    return result;
};
exports.primDecoderProto14 = primDecoderProto14;
var primViewDecoderProto14 = function (value, result) {
    value.consume(4);
    result['args'] = new Array(4).fill(0).map(function () { return (0, exports.valueDecoderProto14)(value); });
    value.consume(4);
    return result;
};
exports.primViewDecoderProto14 = primViewDecoderProto14;
var decodeCombPair = function (val) {
    var array = new uint8array_consumer_1.Uint8ArrayConsumer((0, codec_1.extractRequiredLen)(val));
    var args = [];
    while (array.length() > 0) {
        args.push((0, exports.valueDecoderProto14)(array));
    }
    return args;
};
exports.decodeCombPair = decodeCombPair;
//# sourceMappingURL=codec-proto14.js.map