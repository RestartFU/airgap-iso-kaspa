"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsupportedOperationError = exports.OperationEncodingError = exports.OperationDecodingError = exports.UnexpectedMichelsonValueError = exports.InvalidHexStringError = exports.DecodeBallotValueError = exports.InvalidBallotValueError = exports.OversizedEntryPointError = exports.InvalidOperationSchemaError = exports.InvalidBlockHashError = void 0;
var constants_1 = require("./constants");
/**
 *  @category Error
 *  @description Error that indicates an invalid block hash being passed or used
 */
var InvalidBlockHashError = /** @class */ (function (_super) {
    __extends(InvalidBlockHashError, _super);
    function InvalidBlockHashError(message) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = 'InvalidBlockHashError';
        return _this;
    }
    return InvalidBlockHashError;
}(Error));
exports.InvalidBlockHashError = InvalidBlockHashError;
/**
 *  @category Error
 *  @description Error that indicates an invalid operation schema being passed or used
 */ var InvalidOperationSchemaError = /** @class */ (function (_super) {
    __extends(InvalidOperationSchemaError, _super);
    function InvalidOperationSchemaError(message) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = 'InvalidOperationSchemaError';
        return _this;
    }
    return InvalidOperationSchemaError;
}(Error));
exports.InvalidOperationSchemaError = InvalidOperationSchemaError;
/**
 *  @category Error
 *  @description Error that indicates an entrypoint exceeding maximum size
 */
var OversizedEntryPointError = /** @class */ (function (_super) {
    __extends(OversizedEntryPointError, _super);
    function OversizedEntryPointError(entrypoint) {
        var _this = _super.call(this, "Oversized entrypoint: ".concat(entrypoint, ". The maximum length of entrypoint is ").concat(constants_1.ENTRYPOINT_MAX_LENGTH)) || this;
        _this.entrypoint = entrypoint;
        _this.name = 'OversizedEntryPointError';
        return _this;
    }
    return OversizedEntryPointError;
}(Error));
exports.OversizedEntryPointError = OversizedEntryPointError;
/**
 *  @category Error
 *  @description Error that indicates an invalid ballot value
 */
var InvalidBallotValueError = /** @class */ (function (_super) {
    __extends(InvalidBallotValueError, _super);
    function InvalidBallotValueError(ballotValue) {
        var _this = _super.call(this, "The ballot value '".concat(ballotValue, "' is invalid")) || this;
        _this.ballotValue = ballotValue;
        _this.name = 'InvalidBallotValueError';
        return _this;
    }
    return InvalidBallotValueError;
}(Error));
exports.InvalidBallotValueError = InvalidBallotValueError;
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to decode ballot value
 */
var DecodeBallotValueError = /** @class */ (function (_super) {
    __extends(DecodeBallotValueError, _super);
    function DecodeBallotValueError(ballotValue) {
        var _this = _super.call(this, "Failed to decode ballot value ".concat(ballotValue)) || this;
        _this.ballotValue = ballotValue;
        _this.name = 'DecodeBallotValueError';
        return _this;
    }
    return DecodeBallotValueError;
}(Error));
exports.DecodeBallotValueError = DecodeBallotValueError;
/**
 *  @category Error
 *  @description Error that indicates an invalid hex string have been passed or used
 */
var InvalidHexStringError = /** @class */ (function (_super) {
    __extends(InvalidHexStringError, _super);
    function InvalidHexStringError(hexString) {
        var _this = _super.call(this, "The hex string '".concat(hexString, "' is invalid")) || this;
        _this.hexString = hexString;
        _this.name = 'InvalidHexStringError';
        return _this;
    }
    return InvalidHexStringError;
}(Error));
exports.InvalidHexStringError = InvalidHexStringError;
/**
 *  @category Error
 *  @description Error that indicates unexpected Michelson Value being passed or used
 */
var UnexpectedMichelsonValueError = /** @class */ (function (_super) {
    __extends(UnexpectedMichelsonValueError, _super);
    function UnexpectedMichelsonValueError(value) {
        var _this = _super.call(this, "Failed to encode michelson value '".concat(value, "'")) || this;
        _this.value = value;
        _this.name = 'UnexpectedMichelsonValueError';
        return _this;
    }
    return UnexpectedMichelsonValueError;
}(Error));
exports.UnexpectedMichelsonValueError = UnexpectedMichelsonValueError;
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to decode an operation
 */
var OperationDecodingError = /** @class */ (function (_super) {
    __extends(OperationDecodingError, _super);
    function OperationDecodingError(message) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = 'OperationDecodingError';
        return _this;
    }
    return OperationDecodingError;
}(Error));
exports.OperationDecodingError = OperationDecodingError;
/**
 *  @category Error
 *  @description Error that indicates a failure when trying to encode an operation
 */
var OperationEncodingError = /** @class */ (function (_super) {
    __extends(OperationEncodingError, _super);
    function OperationEncodingError(message) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = 'OperationEncodingError';
        return _this;
    }
    return OperationEncodingError;
}(Error));
exports.OperationEncodingError = OperationEncodingError;
/**
 *  @category Error
 *  @description Error that indicates an unsupported operation being passed or used
 */
var UnsupportedOperationError = /** @class */ (function (_super) {
    __extends(UnsupportedOperationError, _super);
    function UnsupportedOperationError(op) {
        var _this = _super.call(this, "The operation '".concat(op, "' is unsupported")) || this;
        _this.op = op;
        _this.name = 'UnsupportedOperationError';
        return _this;
    }
    return UnsupportedOperationError;
}(Error));
exports.UnsupportedOperationError = UnsupportedOperationError;
//# sourceMappingURL=error.js.map