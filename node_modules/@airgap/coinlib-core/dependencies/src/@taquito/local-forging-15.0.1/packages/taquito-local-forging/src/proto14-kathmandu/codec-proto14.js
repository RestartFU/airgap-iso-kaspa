"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.entrypointNameEncoderProto14 = exports.valueParameterDecoderProto14 = exports.valueParameterEncoderProto14 = exports.parametersEncoderProto14 = exports.entrypointDecoderProto14 = exports.entrypointEncoderProto14 = exports.parametersDecoderProto14 = void 0;
var error_1 = require("../error");
var constants_1 = require("../constants");
var codec_proto14_1 = require("./michelson/codec-proto14");
var codec_1 = require("../michelson/codec");
var uint8array_consumer_1 = require("../uint8array-consumer");
var utils_1 = require("../utils");
var constants_proto14_1 = require("./constants-proto14");
var parametersDecoderProto14 = function (val) {
    var preamble = val.consume(1);
    if (preamble[0] === 0x00) {
        return;
    }
    else {
        var encodedEntrypoint = (0, exports.entrypointDecoderProto14)(val);
        var params = (0, codec_1.extractRequiredLen)(val);
        var parameters = (0, codec_proto14_1.valueDecoderProto14)(new uint8array_consumer_1.Uint8ArrayConsumer(params));
        return {
            entrypoint: encodedEntrypoint,
            value: parameters,
        };
    }
};
exports.parametersDecoderProto14 = parametersDecoderProto14;
var entrypointEncoderProto14 = function (entrypoint) {
    if (entrypoint in constants_proto14_1.entrypointMappingReverseProto14) {
        return "".concat(constants_proto14_1.entrypointMappingReverseProto14[entrypoint]);
    }
    else {
        if (entrypoint.length > constants_1.ENTRYPOINT_MAX_LENGTH) {
            throw new error_1.OversizedEntryPointError(entrypoint);
        }
        var value = { string: entrypoint };
        return "ff".concat((0, codec_proto14_1.valueEncoderProto14)(value).slice(8));
    }
};
exports.entrypointEncoderProto14 = entrypointEncoderProto14;
var entrypointDecoderProto14 = function (value) {
    var preamble = (0, utils_1.pad)(value.consume(1)[0], 2);
    if (preamble in constants_proto14_1.entrypointMappingProto14) {
        return constants_proto14_1.entrypointMappingProto14[preamble];
    }
    else {
        var entry = (0, codec_1.extractRequiredLen)(value, 1);
        var entrypoint = Buffer.from(entry).toString('utf8');
        if (entrypoint.length > constants_1.ENTRYPOINT_MAX_LENGTH) {
            throw new error_1.OversizedEntryPointError(entrypoint);
        }
        return entrypoint;
    }
};
exports.entrypointDecoderProto14 = entrypointDecoderProto14;
var parametersEncoderProto14 = function (val) {
    if (!val || (val.entrypoint === 'default' && 'prim' in val.value && val.value.prim === 'Unit')) {
        return '00';
    }
    var encodedEntrypoint = (0, exports.entrypointEncoderProto14)(val.entrypoint);
    var parameters = (0, codec_proto14_1.valueEncoderProto14)(val.value);
    var length = (parameters.length / 2).toString(16).padStart(8, '0');
    return "ff".concat(encodedEntrypoint).concat(length).concat(parameters);
};
exports.parametersEncoderProto14 = parametersEncoderProto14;
var valueParameterEncoderProto14 = function (value) {
    var valueEncoded = (0, codec_proto14_1.valueEncoderProto14)(value);
    return "".concat((0, utils_1.pad)(valueEncoded.length / 2)).concat(valueEncoded);
};
exports.valueParameterEncoderProto14 = valueParameterEncoderProto14;
var valueParameterDecoderProto14 = function (val) {
    var value = (0, codec_1.extractRequiredLen)(val);
    return (0, codec_proto14_1.valueDecoderProto14)(new uint8array_consumer_1.Uint8ArrayConsumer(value));
};
exports.valueParameterDecoderProto14 = valueParameterDecoderProto14;
var entrypointNameEncoderProto14 = function (entrypoint) {
    var value = { string: entrypoint };
    return "".concat((0, codec_proto14_1.valueEncoderProto14)(value).slice(2));
};
exports.entrypointNameEncoderProto14 = entrypointNameEncoderProto14;
//# sourceMappingURL=codec-proto14.js.map