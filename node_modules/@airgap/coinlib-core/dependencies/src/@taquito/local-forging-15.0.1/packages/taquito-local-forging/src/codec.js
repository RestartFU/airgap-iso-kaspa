"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.burnLimitDecoder = exports.burnLimitEncoder = exports.txRollupBatchContentDecoder = exports.txRollupBatchContentEncoder = exports.txRollupIdDecoder = exports.txRollupIdEncoder = exports.txRollupOriginationParamDecoder = exports.txRollupOriginationParamEncoder = exports.entrypointNameDecoder = exports.entrypointNameEncoder = exports.blockPayloadHashDecoder = exports.blockPayloadHashEncoder = exports.valueParameterDecoder = exports.valueParameterEncoder = exports.parametersEncoder = exports.entrypointEncoder = exports.parametersDecoder = exports.entrypointDecoder = exports.zarithDecoder = exports.zarithEncoder = exports.smartContractAddressDecoder = exports.addressDecoder = exports.publicKeyDecoder = exports.smartContractAddressEncoder = exports.addressEncoder = exports.publicKeyEncoder = exports.pkhEncoder = exports.delegateDecoder = exports.boolDecoder = exports.int16Decoder = exports.int16Encoder = exports.int32Decoder = exports.int32Encoder = exports.delegateEncoder = exports.ballotDecoder = exports.ballotEncoder = exports.proposalsEncoder = exports.proposalsDecoder = exports.proposalDecoder = exports.proposalEncoder = exports.boolEncoder = exports.tz1Encoder = exports.branchEncoder = exports.pkhDecoder = exports.branchDecoder = exports.tz1Decoder = exports.prefixDecoder = exports.prefixEncoder = void 0;
var taquito_utils_1 = require("../../../../../@taquito/utils-15.0.1/packages/taquito-utils/src/taquito-utils");
var error_1 = require("./error");
var bignumber_1 = __importDefault(require("../../../../../bignumber.js-9.0.0/bignumber"));
var constants_1 = require("./constants");
var codec_1 = require("./michelson/codec");
var uint8array_consumer_1 = require("./uint8array-consumer");
var utils_1 = require("./utils");
var prefixEncoder = function (prefix) { return function (str) {
    return (0, taquito_utils_1.buf2hex)(Buffer.from((0, taquito_utils_1.b58cdecode)(str, taquito_utils_1.prefix[prefix])));
}; };
exports.prefixEncoder = prefixEncoder;
var prefixDecoder = function (pre) { return function (str) {
    var val = str.consume(taquito_utils_1.prefixLength[pre]);
    return (0, taquito_utils_1.b58cencode)(val, taquito_utils_1.prefix[pre]);
}; };
exports.prefixDecoder = prefixDecoder;
exports.tz1Decoder = (0, exports.prefixDecoder)(taquito_utils_1.Prefix.TZ1);
exports.branchDecoder = (0, exports.prefixDecoder)(taquito_utils_1.Prefix.B);
var pkhDecoder = function (val) {
    var prefix = val.consume(1);
    if (prefix[0] === 0x00) {
        return (0, exports.prefixDecoder)(taquito_utils_1.Prefix.TZ1)(val);
    }
    else if (prefix[0] === 0x01) {
        return (0, exports.prefixDecoder)(taquito_utils_1.Prefix.TZ2)(val);
    }
    else if (prefix[0] === 0x02) {
        return (0, exports.prefixDecoder)(taquito_utils_1.Prefix.TZ3)(val);
    }
};
exports.pkhDecoder = pkhDecoder;
exports.branchEncoder = (0, exports.prefixEncoder)(taquito_utils_1.Prefix.B);
exports.tz1Encoder = (0, exports.prefixEncoder)(taquito_utils_1.Prefix.TZ1);
var boolEncoder = function (bool) { return (bool ? 'ff' : '00'); };
exports.boolEncoder = boolEncoder;
var proposalEncoder = function (proposal) {
    return (0, exports.prefixEncoder)(taquito_utils_1.Prefix.P)(proposal);
};
exports.proposalEncoder = proposalEncoder;
var proposalDecoder = function (proposal) {
    return (0, exports.prefixDecoder)(taquito_utils_1.Prefix.P)(proposal);
};
exports.proposalDecoder = proposalDecoder;
var proposalsDecoder = function (proposal) {
    var proposals = [];
    proposal.consume(4);
    while (proposal.length() > 0) {
        proposals.push((0, exports.proposalDecoder)(proposal));
    }
    return proposals;
};
exports.proposalsDecoder = proposalsDecoder;
var proposalsEncoder = function (proposals) {
    return (0, utils_1.pad)(32 * proposals.length) + proposals.map(function (x) { return (0, exports.proposalEncoder)(x); }).join('');
};
exports.proposalsEncoder = proposalsEncoder;
var ballotEncoder = function (ballot) {
    switch (ballot) {
        case 'yay':
            return '00';
        case 'nay':
            return '01';
        case 'pass':
            return '02';
        default:
            throw new error_1.InvalidBallotValueError(ballot);
    }
};
exports.ballotEncoder = ballotEncoder;
var ballotDecoder = function (ballot) {
    var value = ballot.consume(1);
    switch (value[0]) {
        case 0x00:
            return 'yay';
        case 0x01:
            return 'nay';
        case 0x02:
            return 'pass';
        default:
            throw new error_1.DecodeBallotValueError(value[0].toString());
    }
};
exports.ballotDecoder = ballotDecoder;
var delegateEncoder = function (val) {
    if (val) {
        return (0, exports.boolEncoder)(true) + (0, exports.pkhEncoder)(val);
    }
    else {
        return (0, exports.boolEncoder)(false);
    }
};
exports.delegateEncoder = delegateEncoder;
var int32Encoder = function (val) {
    var num = parseInt(String(val), 10);
    var byte = [];
    for (var i = 0; i < 4; i++) {
        var shiftBy = (4 - (i + 1)) * 8;
        byte.push((num & (0xff << shiftBy)) >> shiftBy);
    }
    return Buffer.from(byte).toString('hex');
};
exports.int32Encoder = int32Encoder;
var int32Decoder = function (val) {
    var num = val.consume(4);
    var finalNum = 0;
    for (var i = 0; i < num.length; i++) {
        finalNum = finalNum | (num[i] << ((num.length - (i + 1)) * 8));
    }
    return finalNum;
};
exports.int32Decoder = int32Decoder;
var int16Encoder = function (val) {
    var num = parseInt(String(val), 10);
    var byte = [];
    for (var i = 0; i < 2; i++) {
        var shiftBy = (2 - (i + 1)) * 8;
        byte.push((num & (0xff << shiftBy)) >> shiftBy);
    }
    return Buffer.from(byte).toString('hex');
};
exports.int16Encoder = int16Encoder;
var int16Decoder = function (val) {
    var num = val.consume(2);
    var finalNum = 0;
    for (var i = 0; i < num.length; i++) {
        finalNum = finalNum | (num[i] << ((num.length - (i + 1)) * 8));
    }
    return finalNum;
};
exports.int16Decoder = int16Decoder;
var boolDecoder = function (val) {
    var bool = val.consume(1);
    return bool[0] === 0xff;
};
exports.boolDecoder = boolDecoder;
var delegateDecoder = function (val) {
    var hasDelegate = (0, exports.boolDecoder)(val);
    if (hasDelegate) {
        return (0, exports.pkhDecoder)(val);
    }
};
exports.delegateDecoder = delegateDecoder;
var pkhEncoder = function (val) {
    var pubkeyPrefix = val.substr(0, 3);
    switch (pubkeyPrefix) {
        case taquito_utils_1.Prefix.TZ1:
            return '00' + (0, exports.prefixEncoder)(taquito_utils_1.Prefix.TZ1)(val);
        case taquito_utils_1.Prefix.TZ2:
            return '01' + (0, exports.prefixEncoder)(taquito_utils_1.Prefix.TZ2)(val);
        case taquito_utils_1.Prefix.TZ3:
            return '02' + (0, exports.prefixEncoder)(taquito_utils_1.Prefix.TZ3)(val);
        default:
            throw new taquito_utils_1.InvalidKeyHashError(val);
    }
};
exports.pkhEncoder = pkhEncoder;
var publicKeyEncoder = function (val) {
    var pubkeyPrefix = val.substr(0, 4);
    switch (pubkeyPrefix) {
        case taquito_utils_1.Prefix.EDPK:
            return '00' + (0, exports.prefixEncoder)(taquito_utils_1.Prefix.EDPK)(val);
        case taquito_utils_1.Prefix.SPPK:
            return '01' + (0, exports.prefixEncoder)(taquito_utils_1.Prefix.SPPK)(val);
        case taquito_utils_1.Prefix.P2PK:
            return '02' + (0, exports.prefixEncoder)(taquito_utils_1.Prefix.P2PK)(val);
        default:
            throw new taquito_utils_1.InvalidPublicKeyError(val);
    }
};
exports.publicKeyEncoder = publicKeyEncoder;
var addressEncoder = function (val) {
    var pubkeyPrefix = val.substr(0, 3);
    switch (pubkeyPrefix) {
        case taquito_utils_1.Prefix.TZ1:
        case taquito_utils_1.Prefix.TZ2:
        case taquito_utils_1.Prefix.TZ3:
            return '00' + (0, exports.pkhEncoder)(val);
        case taquito_utils_1.Prefix.KT1:
            return '01' + (0, exports.prefixEncoder)(taquito_utils_1.Prefix.KT1)(val) + '00';
        default:
            throw new taquito_utils_1.InvalidAddressError(val);
    }
};
exports.addressEncoder = addressEncoder;
var smartContractAddressEncoder = function (val) {
    var prefix = val.substring(0, 3);
    if (prefix === taquito_utils_1.Prefix.KT1) {
        return '01' + (0, exports.prefixEncoder)(taquito_utils_1.Prefix.KT1)(val) + '00';
    }
    throw new taquito_utils_1.InvalidContractAddressError(val);
};
exports.smartContractAddressEncoder = smartContractAddressEncoder;
var publicKeyDecoder = function (val) {
    var preamble = val.consume(1);
    switch (preamble[0]) {
        case 0x00:
            return (0, exports.prefixDecoder)(taquito_utils_1.Prefix.EDPK)(val);
        case 0x01:
            return (0, exports.prefixDecoder)(taquito_utils_1.Prefix.SPPK)(val);
        case 0x02:
            return (0, exports.prefixDecoder)(taquito_utils_1.Prefix.P2PK)(val);
        default:
            throw new taquito_utils_1.InvalidPublicKeyError(val.toString());
    }
};
exports.publicKeyDecoder = publicKeyDecoder;
var addressDecoder = function (val) {
    var preamble = val.consume(1);
    switch (preamble[0]) {
        case 0x00:
            return (0, exports.pkhDecoder)(val);
        case 0x01: {
            var address = (0, exports.prefixDecoder)(taquito_utils_1.Prefix.KT1)(val);
            val.consume(1);
            return address;
        }
        default:
            throw new taquito_utils_1.InvalidAddressError(val.toString());
    }
};
exports.addressDecoder = addressDecoder;
var smartContractAddressDecoder = function (val) {
    var preamble = val.consume(1);
    if (preamble[0] === 0x01) {
        var scAddress = (0, exports.prefixDecoder)(taquito_utils_1.Prefix.KT1)(val);
        val.consume(1);
        return scAddress;
    }
    throw new taquito_utils_1.InvalidContractAddressError(val.toString());
};
exports.smartContractAddressDecoder = smartContractAddressDecoder;
var zarithEncoder = function (n) {
    var fn = [];
    var nn = new bignumber_1.default(n, 10);
    if (nn.isNaN()) {
        throw new TypeError("Invalid zarith number ".concat(n));
    }
    // eslint-disable-next-line no-constant-condition
    while (true) {
        if (nn.lt(128)) {
            if (nn.lt(16))
                fn.push('0');
            fn.push(nn.toString(16));
            break;
        }
        else {
            var b = nn.mod(128);
            nn = nn.minus(b);
            nn = nn.dividedBy(128);
            b = b.plus(128);
            fn.push(b.toString(16));
        }
    }
    return fn.join('');
};
exports.zarithEncoder = zarithEncoder;
var zarithDecoder = function (n) {
    var mostSignificantByte = 0;
    while (mostSignificantByte < n.length() && (n.get(mostSignificantByte) & 128) !== 0) {
        mostSignificantByte += 1;
    }
    var num = new bignumber_1.default(0);
    for (var i = mostSignificantByte; i >= 0; i -= 1) {
        var tmp = n.get(i) & 0x7f;
        num = num.multipliedBy(128);
        num = num.plus(tmp);
    }
    n.consume(mostSignificantByte + 1);
    return new bignumber_1.default(num).toString();
};
exports.zarithDecoder = zarithDecoder;
var entrypointDecoder = function (value) {
    var preamble = (0, utils_1.pad)(value.consume(1)[0], 2);
    if (preamble in constants_1.entrypointMapping) {
        return constants_1.entrypointMapping[preamble];
    }
    else {
        var entry = (0, codec_1.extractRequiredLen)(value, 1);
        var entrypoint = Buffer.from(entry).toString('utf8');
        if (entrypoint.length > constants_1.ENTRYPOINT_MAX_LENGTH) {
            throw new error_1.OversizedEntryPointError(entrypoint);
        }
        return entrypoint;
    }
};
exports.entrypointDecoder = entrypointDecoder;
var parametersDecoder = function (val) {
    var preamble = val.consume(1);
    if (preamble[0] === 0x00) {
        return;
    }
    else {
        var encodedEntrypoint = (0, exports.entrypointDecoder)(val);
        var params = (0, codec_1.extractRequiredLen)(val);
        var parameters = (0, codec_1.valueDecoder)(new uint8array_consumer_1.Uint8ArrayConsumer(params));
        return {
            entrypoint: encodedEntrypoint,
            value: parameters,
        };
    }
};
exports.parametersDecoder = parametersDecoder;
var entrypointEncoder = function (entrypoint) {
    if (entrypoint in constants_1.entrypointMappingReverse) {
        return "".concat(constants_1.entrypointMappingReverse[entrypoint]);
    }
    else {
        if (entrypoint.length > constants_1.ENTRYPOINT_MAX_LENGTH) {
            throw new error_1.OversizedEntryPointError(entrypoint);
        }
        var value = { string: entrypoint };
        return "ff".concat((0, codec_1.valueEncoder)(value).slice(8));
    }
};
exports.entrypointEncoder = entrypointEncoder;
var parametersEncoder = function (val) {
    if (!val || (val.entrypoint === 'default' && 'prim' in val.value && val.value.prim === 'Unit')) {
        return '00';
    }
    var encodedEntrypoint = (0, exports.entrypointEncoder)(val.entrypoint);
    var parameters = (0, codec_1.valueEncoder)(val.value);
    var length = (parameters.length / 2).toString(16).padStart(8, '0');
    return "ff".concat(encodedEntrypoint).concat(length).concat(parameters);
};
exports.parametersEncoder = parametersEncoder;
var valueParameterEncoder = function (value) {
    var valueEncoded = (0, codec_1.valueEncoder)(value);
    return "".concat((0, utils_1.pad)(valueEncoded.length / 2)).concat(valueEncoded);
};
exports.valueParameterEncoder = valueParameterEncoder;
var valueParameterDecoder = function (val) {
    var value = (0, codec_1.extractRequiredLen)(val);
    return (0, codec_1.valueDecoder)(new uint8array_consumer_1.Uint8ArrayConsumer(value));
};
exports.valueParameterDecoder = valueParameterDecoder;
exports.blockPayloadHashEncoder = (0, exports.prefixEncoder)(taquito_utils_1.Prefix.VH);
exports.blockPayloadHashDecoder = (0, exports.prefixDecoder)(taquito_utils_1.Prefix.VH);
var entrypointNameEncoder = function (entrypoint) {
    var value = { string: entrypoint };
    return "".concat((0, codec_1.valueEncoder)(value).slice(2));
};
exports.entrypointNameEncoder = entrypointNameEncoder;
var entrypointNameDecoder = function (val) {
    var entry = (0, codec_1.extractRequiredLen)(val);
    return Buffer.from(entry).toString('utf8');
};
exports.entrypointNameDecoder = entrypointNameDecoder;
var txRollupOriginationParamEncoder = function (_value) {
    return '';
};
exports.txRollupOriginationParamEncoder = txRollupOriginationParamEncoder;
var txRollupOriginationParamDecoder = function (_val) {
    return {};
};
exports.txRollupOriginationParamDecoder = txRollupOriginationParamDecoder;
exports.txRollupIdEncoder = (0, exports.prefixEncoder)(taquito_utils_1.Prefix.TXR1);
exports.txRollupIdDecoder = (0, exports.prefixDecoder)(taquito_utils_1.Prefix.TXR1);
var txRollupBatchContentEncoder = function (value) {
    return "".concat((0, utils_1.pad)(value.length / 2)).concat(value);
};
exports.txRollupBatchContentEncoder = txRollupBatchContentEncoder;
var txRollupBatchContentDecoder = function (val) {
    var value = (0, codec_1.extractRequiredLen)(val);
    return Buffer.from(value).toString('hex');
};
exports.txRollupBatchContentDecoder = txRollupBatchContentDecoder;
var burnLimitEncoder = function (val) {
    return !val ? '00' : "ff".concat((0, exports.zarithEncoder)(val));
};
exports.burnLimitEncoder = burnLimitEncoder;
var burnLimitDecoder = function (value) {
    var prefix = value.consume(1);
    if (Buffer.from(prefix).toString('hex') !== '00') {
        return (0, exports.zarithDecoder)(value);
    }
};
exports.burnLimitDecoder = burnLimitDecoder;
//# sourceMappingURL=codec.js.map