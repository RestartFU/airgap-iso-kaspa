"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateMissingProperty = exports.validateOperationKind = void 0;
var operation_1 = require("./schema/operation");
var OperationKindMapping = {
    activate_account: operation_1.ActivationSchema,
    reveal: operation_1.RevealSchema,
    delegation: operation_1.DelegationSchema,
    transaction: operation_1.TransactionSchema,
    origination: operation_1.OriginationSchema,
    ballot: operation_1.BallotSchema,
    endorsement: operation_1.EndorsementSchema,
    seed_nonce_revelation: operation_1.SeedNonceRevelationSchema,
    proposals: operation_1.ProposalsSchema,
    register_global_constant: operation_1.RegisterGlobalConstantSchema,
    transfer_ticket: operation_1.TransferTicketSchema,
    tx_rollup_origination: operation_1.TxRollupOriginationSchema,
    tx_rollup_submit_batch: operation_1.TxRollupSubmitBatchSchema,
    increase_paid_storage: operation_1.IncreasePaidStorageSchema,
    update_consensus_key: operation_1.UpdateConsensusKeySchema,
    drain_delegate: operation_1.DrainDelegateSchema,
};
// Asymmetric difference: only account for things in arr2 that are not present in arr1, not vice versa
var getArrayDifference = function (arr1, arr2) {
    return arr2.filter(function (x) { return !arr1.includes(x); });
};
var deleteArrayElementByValue = function (array, item) {
    return array.filter(function (e) { return e !== item; });
};
/**
 * @returns A boolean value to indicate whether the operation kind is valid or not
 */
var validateOperationKind = function (opKind) {
    var opKindList = Object.keys(OperationKindMapping);
    return opKindList.includes(opKind);
};
exports.validateOperationKind = validateOperationKind;
/**
 *  returns 0 when the two array of properties are identical or the passed property
 *  does not have any missing parameters from the corresponding schema
 *
 *  @returns array element differences if there are missing required property keys
 */
var validateMissingProperty = function (operationContent) {
    var kind = operationContent.kind;
    var keys = Object.keys(operationContent);
    var cleanKeys = deleteArrayElementByValue(keys, 'kind');
    var schemaKeys = Object.keys(OperationKindMapping[kind]);
    return getArrayDifference(cleanKeys, schemaKeys);
};
exports.validateMissingProperty = validateMissingProperty;
//# sourceMappingURL=validator.js.map