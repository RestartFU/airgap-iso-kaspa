"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schemaDecoder = exports.schemaEncoder = exports.operationDecoder = exports.operationEncoder = exports.DrainDelegateSchema = exports.UpdateConsensusKeySchema = exports.IncreasePaidStorageSchema = exports.TxRollupSubmitBatchSchema = exports.TxRollupOriginationSchema = exports.TransferTicketSchema = exports.RegisterGlobalConstantSchema = exports.ProposalsSchema = exports.SeedNonceRevelationSchema = exports.EndorsementSchema = exports.BallotSchema = exports.OriginationSchema = exports.TransactionSchema = exports.DelegationSchema = exports.RevealSchema = exports.ActivationSchema = exports.ManagerOperationSchema = void 0;
var constants_1 = require("../constants");
var taquito_utils_1 = require("../../../../../../@taquito/utils-15.0.1/packages/taquito-utils/src/taquito-utils");
var error_1 = require("../error");
exports.ManagerOperationSchema = {
    branch: constants_1.CODEC.BRANCH,
    contents: [constants_1.CODEC.OPERATION],
};
exports.ActivationSchema = {
    pkh: constants_1.CODEC.TZ1,
    secret: constants_1.CODEC.SECRET,
};
exports.RevealSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    public_key: constants_1.CODEC.PUBLIC_KEY,
};
exports.DelegationSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    delegate: constants_1.CODEC.DELEGATE,
};
exports.TransactionSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    amount: constants_1.CODEC.ZARITH,
    destination: constants_1.CODEC.ADDRESS,
    parameters: constants_1.CODEC.PARAMETERS,
};
exports.OriginationSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    balance: constants_1.CODEC.ZARITH,
    delegate: constants_1.CODEC.DELEGATE,
    script: constants_1.CODEC.SCRIPT,
};
exports.BallotSchema = {
    source: constants_1.CODEC.PKH,
    period: constants_1.CODEC.INT32,
    proposal: constants_1.CODEC.PROPOSAL,
    ballot: constants_1.CODEC.BALLOT_STATEMENT,
};
exports.EndorsementSchema = {
    slot: constants_1.CODEC.INT16,
    level: constants_1.CODEC.INT32,
    round: constants_1.CODEC.INT32,
    block_payload_hash: constants_1.CODEC.BLOCK_PAYLOAD_HASH,
};
exports.SeedNonceRevelationSchema = {
    level: constants_1.CODEC.INT32,
    nonce: constants_1.CODEC.RAW,
};
exports.ProposalsSchema = {
    source: constants_1.CODEC.PKH,
    period: constants_1.CODEC.INT32,
    proposals: constants_1.CODEC.PROPOSAL_ARR,
};
exports.RegisterGlobalConstantSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    value: constants_1.CODEC.VALUE,
};
exports.TransferTicketSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    ticket_contents: constants_1.CODEC.VALUE,
    ticket_ty: constants_1.CODEC.VALUE,
    ticket_ticketer: constants_1.CODEC.ADDRESS,
    ticket_amount: constants_1.CODEC.ZARITH,
    destination: constants_1.CODEC.ADDRESS,
    entrypoint: constants_1.CODEC.ENTRYPOINT,
};
exports.TxRollupOriginationSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    tx_rollup_origination: constants_1.CODEC.TX_ROLLUP_ORIGINATION_PARAM,
};
exports.TxRollupSubmitBatchSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    rollup: constants_1.CODEC.TX_ROLLUP_ID,
    content: constants_1.CODEC.TX_ROLLUP_BATCH_CONTENT,
    burn_limit: constants_1.CODEC.BURN_LIMIT,
};
exports.IncreasePaidStorageSchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    amount: constants_1.CODEC.ZARITH,
    destination: constants_1.CODEC.SMART_CONTRACT_ADDRESS,
};
exports.UpdateConsensusKeySchema = {
    source: constants_1.CODEC.PKH,
    fee: constants_1.CODEC.ZARITH,
    counter: constants_1.CODEC.ZARITH,
    gas_limit: constants_1.CODEC.ZARITH,
    storage_limit: constants_1.CODEC.ZARITH,
    pk: constants_1.CODEC.PUBLIC_KEY,
};
exports.DrainDelegateSchema = {
    consensus_key: constants_1.CODEC.PKH,
    delegate: constants_1.CODEC.PKH,
    destination: constants_1.CODEC.PKH,
};
var operationEncoder = function (encoders) { return function (operation) {
    if (!(operation.kind in encoders) || !(operation.kind in constants_1.kindMappingReverse)) {
        throw new taquito_utils_1.InvalidOperationKindError(operation.kind);
    }
    return constants_1.kindMappingReverse[operation.kind] + encoders[operation.kind](operation);
}; };
exports.operationEncoder = operationEncoder;
var operationDecoder = function (decoders) { return function (value) {
    var op = value.consume(1);
    var operationName = constants_1.kindMapping[op[0]];
    if (operationName === undefined) {
        throw new error_1.UnsupportedOperationError(op[0].toString());
    }
    var decodedObj = decoders[operationName](value);
    if (typeof decodedObj !== 'object') {
        throw new error_1.OperationDecodingError('Decoded invalid operation');
    }
    return __assign({ kind: operationName }, decodedObj);
}; };
exports.operationDecoder = operationDecoder;
var schemaEncoder = function (encoders) { return function (schema) { return function (value) {
    var keys = Object.keys(schema);
    return keys.reduce(function (prev, key) {
        var valueToEncode = schema[key];
        if (value && Array.isArray(valueToEncode)) {
            var encoder_1 = encoders[valueToEncode[0]];
            var values = value[key];
            if (!Array.isArray(values)) {
                throw new error_1.OperationEncodingError("Expected value to be Array ".concat(JSON.stringify(values)));
            }
            return prev + values.reduce(function (prevBytes, current) { return prevBytes + encoder_1(current); }, '');
        }
        else {
            var encoder = encoders[valueToEncode];
            return prev + encoder(value[key]);
        }
    }, '');
}; }; };
exports.schemaEncoder = schemaEncoder;
var schemaDecoder = function (decoders) {
    return function (schema) {
        return function (value) {
            var keys = Object.keys(schema);
            return keys.reduce(function (prev, key) {
                var _a, _b;
                var valueToEncode = schema[key];
                if (Array.isArray(valueToEncode)) {
                    var decoder = decoders[valueToEncode[0]];
                    var decoded = [];
                    var lastLength = value.length();
                    while (value.length() > 0) {
                        decoded.push(decoder(value));
                        if (lastLength === value.length()) {
                            throw new error_1.OperationDecodingError('Unable to decode value');
                        }
                    }
                    return __assign(__assign({}, prev), (_a = {}, _a[key] = decoded, _a));
                }
                else {
                    var decoder = decoders[valueToEncode];
                    var result = decoder(value);
                    if (typeof result !== 'undefined') {
                        return __assign(__assign({}, prev), (_b = {}, _b[key] = result, _b));
                    }
                    else {
                        return __assign({}, prev);
                    }
                }
            }, {});
        };
    };
};
exports.schemaDecoder = schemaDecoder;
//# sourceMappingURL=operation.js.map