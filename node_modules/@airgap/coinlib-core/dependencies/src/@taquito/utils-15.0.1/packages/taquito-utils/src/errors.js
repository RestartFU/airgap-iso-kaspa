"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidHexStringError = exports.ValueConversionError = exports.ProhibitedActionError = exports.DeprecationError = exports.InvalidOperationKindError = exports.InvalidOperationHashError = exports.InvalidProtocolHashError = exports.InvalidBlockHashError = exports.InvalidKeyHashError = exports.InvalidChainIdError = exports.InvalidAddressError = exports.InvalidContractAddressError = exports.InvalidMessageError = exports.InvalidSignatureError = exports.InvalidPublicKeyError = exports.InvalidKeyError = void 0;
/**
 *  @category Error
 *  @description Error that indicates an invalid key being passed or used
 */
var InvalidKeyError = /** @class */ (function (_super) {
    __extends(InvalidKeyError, _super);
    function InvalidKeyError(key, errorDetail) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.errorDetail = errorDetail;
        _this.name = 'InvalidKeyError';
        var baseMessage = "The key ".concat(key, " is invalid.");
        _this.message = errorDetail ? "".concat(baseMessage, " ").concat(errorDetail) : baseMessage;
        return _this;
    }
    return InvalidKeyError;
}(Error));
exports.InvalidKeyError = InvalidKeyError;
/**
 *  @category Error
 *  @description Error that indicates an Invalid Public Key being passed or used
 */
var InvalidPublicKeyError = /** @class */ (function (_super) {
    __extends(InvalidPublicKeyError, _super);
    function InvalidPublicKeyError(publicKey, errorDetail) {
        var _this = _super.call(this) || this;
        _this.publicKey = publicKey;
        _this.name = 'InvalidPublicKeyError';
        var baseMessage = "The public key '".concat(publicKey, "' is invalid.");
        _this.message = errorDetail ? "".concat(baseMessage, " ").concat(errorDetail) : baseMessage;
        return _this;
    }
    return InvalidPublicKeyError;
}(Error));
exports.InvalidPublicKeyError = InvalidPublicKeyError;
/**
 *  @category Error
 *  @description Error that indicates an invalid signature being passed or used
 */
var InvalidSignatureError = /** @class */ (function (_super) {
    __extends(InvalidSignatureError, _super);
    function InvalidSignatureError(signature, errorDetail) {
        var _this = _super.call(this) || this;
        _this.signature = signature;
        _this.name = 'InvalidSignatureError';
        var baseMessage = "The signature '".concat(signature, "' is invalid.");
        _this.message = errorDetail ? "".concat(baseMessage, " ").concat(errorDetail) : baseMessage;
        return _this;
    }
    return InvalidSignatureError;
}(Error));
exports.InvalidSignatureError = InvalidSignatureError;
/**
 *  @category Error
 *  @description Error that indicates an invalid message being passed or used
 */
var InvalidMessageError = /** @class */ (function (_super) {
    __extends(InvalidMessageError, _super);
    function InvalidMessageError(msg, errorDetail) {
        var _this = _super.call(this) || this;
        _this.msg = msg;
        _this.errorDetail = errorDetail;
        _this.name = 'InvalidMessageError';
        var baseMessage = "The message '".concat(msg, "' is invalid.");
        _this.message = errorDetail ? "".concat(baseMessage, " ").concat(errorDetail) : baseMessage;
        return _this;
    }
    return InvalidMessageError;
}(Error));
exports.InvalidMessageError = InvalidMessageError;
/**
 *  @category Error
 *  @description Error that indicates an invalid contract address being passed or used
 */
var InvalidContractAddressError = /** @class */ (function (_super) {
    __extends(InvalidContractAddressError, _super);
    function InvalidContractAddressError(contractAddress) {
        var _this = _super.call(this, "The contract address '".concat(contractAddress, "' is invalid")) || this;
        _this.contractAddress = contractAddress;
        _this.name = 'InvalidContractAddressError';
        return _this;
    }
    return InvalidContractAddressError;
}(Error));
exports.InvalidContractAddressError = InvalidContractAddressError;
/**
 *  @category Error
 *  @description Error that indicates an invalid address being passed or used (both contract and implicit)
 */
var InvalidAddressError = /** @class */ (function (_super) {
    __extends(InvalidAddressError, _super);
    function InvalidAddressError(address, errorDetail) {
        var _this = _super.call(this) || this;
        _this.address = address;
        _this.name = 'InvalidAddressError';
        var baseMessage = "The address '".concat(address, "' is invalid.");
        _this.message = errorDetail ? "".concat(baseMessage, " ").concat(errorDetail) : baseMessage;
        return _this;
    }
    return InvalidAddressError;
}(Error));
exports.InvalidAddressError = InvalidAddressError;
/**
 *  @category Error
 *  @description Error that indicates an invalid chain id being passed or used
 */
var InvalidChainIdError = /** @class */ (function (_super) {
    __extends(InvalidChainIdError, _super);
    function InvalidChainIdError(chainId) {
        var _this = _super.call(this, "The chain id '".concat(chainId, "' is invalid")) || this;
        _this.chainId = chainId;
        _this.name = 'InvalidChainIdError';
        return _this;
    }
    return InvalidChainIdError;
}(Error));
exports.InvalidChainIdError = InvalidChainIdError;
/**
 *  @category Error
 *  @description Error that indicates an invalid key hash being passed or used
 */
var InvalidKeyHashError = /** @class */ (function (_super) {
    __extends(InvalidKeyHashError, _super);
    function InvalidKeyHashError(keyHash) {
        var _this = _super.call(this, "The public key hash '".concat(keyHash, "' is invalid")) || this;
        _this.keyHash = keyHash;
        _this.name = 'InvalidKeyHashError';
        return _this;
    }
    return InvalidKeyHashError;
}(Error));
exports.InvalidKeyHashError = InvalidKeyHashError;
/**
 *  @category Error
 *  @description Error that indicates an invalid block hash being passed or used
 */ var InvalidBlockHashError = /** @class */ (function (_super) {
    __extends(InvalidBlockHashError, _super);
    function InvalidBlockHashError(blockHash) {
        var _this = _super.call(this, "The block hash '".concat(blockHash, "' is invalid")) || this;
        _this.blockHash = blockHash;
        _this.name = 'InvalidBlockHashError';
        return _this;
    }
    return InvalidBlockHashError;
}(Error));
exports.InvalidBlockHashError = InvalidBlockHashError;
/**
 *  @category Error
 *  @description Error that indicates invalid protocol hash being passed or used
 */
var InvalidProtocolHashError = /** @class */ (function (_super) {
    __extends(InvalidProtocolHashError, _super);
    function InvalidProtocolHashError(protocolHash) {
        var _this = _super.call(this, "The protocol hash '".concat(protocolHash, "' is invalid")) || this;
        _this.protocolHash = protocolHash;
        _this.name = 'InvalidProtocolHashError';
        return _this;
    }
    return InvalidProtocolHashError;
}(Error));
exports.InvalidProtocolHashError = InvalidProtocolHashError;
/**
 *  @category Error
 *  @description Error that indicates an invalid operation hash being passed or used
 */ var InvalidOperationHashError = /** @class */ (function (_super) {
    __extends(InvalidOperationHashError, _super);
    function InvalidOperationHashError(operationHash) {
        var _this = _super.call(this, "The operation hash '".concat(operationHash, "' is invalid")) || this;
        _this.operationHash = operationHash;
        _this.name = 'InvalidOperationHashError';
        return _this;
    }
    return InvalidOperationHashError;
}(Error));
exports.InvalidOperationHashError = InvalidOperationHashError;
/**
 *  @category Error
 *  @description Error that indicates an invalid operation kind being passed or used
 */
var InvalidOperationKindError = /** @class */ (function (_super) {
    __extends(InvalidOperationKindError, _super);
    function InvalidOperationKindError(operationKind) {
        var _this = _super.call(this, "The operation kind '".concat(operationKind, "' is unsupported")) || this;
        _this.operationKind = operationKind;
        _this.name = 'InvalidOperationKindError';
        return _this;
    }
    return InvalidOperationKindError;
}(Error));
exports.InvalidOperationKindError = InvalidOperationKindError;
/**
 *  @category Error
 *  @description General error that indicates something is no longer supported and/or deprecated
 */
var DeprecationError = /** @class */ (function (_super) {
    __extends(DeprecationError, _super);
    function DeprecationError(message) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = 'DeprecationError';
        return _this;
    }
    return DeprecationError;
}(Error));
exports.DeprecationError = DeprecationError;
/**
 *  @category Error
 *  @description General error that indicates an action is prohibited or not allowed
 */
var ProhibitedActionError = /** @class */ (function (_super) {
    __extends(ProhibitedActionError, _super);
    function ProhibitedActionError(message) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = 'ProhibitedActionError';
        return _this;
    }
    return ProhibitedActionError;
}(Error));
exports.ProhibitedActionError = ProhibitedActionError;
/**
 *  @category Error
 *  @description General error that indicates a failure when trying to convert data from one type to another
 */
var ValueConversionError = /** @class */ (function (_super) {
    __extends(ValueConversionError, _super);
    function ValueConversionError(value, desiredType) {
        var _this = _super.call(this, "Unable to convert ".concat(value, " to a ").concat(desiredType)) || this;
        _this.value = value;
        _this.desiredType = desiredType;
        _this.name = 'ValueConversionError';
        return _this;
    }
    return ValueConversionError;
}(Error));
exports.ValueConversionError = ValueConversionError;
/**
 *  @category Error
 *  @description Error that indicates an invalid hex string being passed or used
 */
var InvalidHexStringError = /** @class */ (function (_super) {
    __extends(InvalidHexStringError, _super);
    function InvalidHexStringError(message) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = 'InvalidHexStringError';
        return _this;
    }
    return InvalidHexStringError;
}(Error));
exports.InvalidHexStringError = InvalidHexStringError;
//# sourceMappingURL=errors.js.map