"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var hkdf = require("../../../futoin-hkdf-1.3.3/hkdf.js");
var secp256k1 = __importStar(require("../../../secp256k1-4.0.2/elliptic"));
var utils_1 = require("../utils");
var PublicKey_1 = __importDefault(require("./PublicKey"));
var PrivateKey = /** @class */ (function () {
    function PrivateKey(secret) {
        this.secret = secret || (0, utils_1.getValidSecret)();
        if (!secp256k1.privateKeyVerify(this.secret)) {
            throw new Error('Invalid private key');
        }
        this.publicKey = new PublicKey_1.default(Buffer.from(secp256k1.publicKeyCreate(this.secret)));
    }
    PrivateKey.fromHex = function (hex) {
        return new PrivateKey((0, utils_1.decodeHex)(hex));
    };
    PrivateKey.prototype.toHex = function () {
        return "0x".concat(this.secret.toString('hex'));
    };
    PrivateKey.prototype.encapsulate = function (pub) {
        var master = Buffer.concat([this.publicKey.uncompressed, this.multiply(pub)]);
        return hkdf(master, 32, {
            hash: 'SHA-256'
        });
    };
    PrivateKey.prototype.multiply = function (pub) {
        return Buffer.from(secp256k1.publicKeyTweakMul(pub.compressed, this.secret, false));
    };
    PrivateKey.prototype.equals = function (other) {
        return this.secret.equals(other.secret);
    };
    return PrivateKey;
}());
exports.default = PrivateKey;
//# sourceMappingURL=PrivateKey.js.map