"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var hkdf = require("../../../futoin-hkdf-1.3.3/hkdf.js");
var secp256k1 = __importStar(require("../../../secp256k1-4.0.2/elliptic"));
var utils_1 = require("../utils");
var PublicKey = /** @class */ (function () {
    function PublicKey(buffer) {
        this.uncompressed = Buffer.from(secp256k1.publicKeyConvert(buffer, false));
        this.compressed = Buffer.from(secp256k1.publicKeyConvert(buffer, true));
    }
    PublicKey.fromHex = function (hex) {
        var decoded = (0, utils_1.decodeHex)(hex);
        if (decoded.length === 64) {
            // eth public key
            var prefix = Buffer.from([0x04]);
            var fixed = Buffer.concat([prefix, decoded]);
            return new PublicKey(fixed);
        }
        return new PublicKey(decoded);
    };
    PublicKey.prototype.toHex = function (compressed) {
        if (compressed === void 0) { compressed = true; }
        if (compressed) {
            return this.compressed.toString('hex');
        }
        else {
            return this.uncompressed.toString('hex');
        }
    };
    PublicKey.prototype.decapsulate = function (priv) {
        var master = Buffer.concat([this.uncompressed, priv.multiply(this)]);
        return hkdf(master, 32, {
            hash: 'SHA-256'
        });
    };
    PublicKey.prototype.equals = function (other) {
        return this.uncompressed.equals(other.uncompressed);
    };
    return PublicKey;
}());
exports.default = PublicKey;
//# sourceMappingURL=PublicKey.js.map