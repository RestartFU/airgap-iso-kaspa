"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519CryptoClient = void 0;
var bytes_1 = require("@stablelib/bytes");
var blake2b_1 = require("@stablelib/blake2b");
var ed25519_1 = require("@stablelib/ed25519");
var nacl_1 = require("@stablelib/nacl");
var utf8_1 = require("@stablelib/utf8");
var hex_1 = require("../utils/hex");
var CryptoClient_1 = require("./CryptoClient");
function toHex(value) {
    return Buffer.from(value).toString('hex');
}
var Ed25519CryptoClient = /** @class */ (function (_super) {
    __extends(Ed25519CryptoClient, _super);
    function Ed25519CryptoClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ed25519CryptoClient.prototype.encryptAsymmetric = function (payload, publicKey) {
        return __awaiter(this, void 0, void 0, function () {
            var kxOtherPublicKey, keypair, state, nonce, encryptedMessage;
            return __generator(this, function (_a) {
                kxOtherPublicKey = (0, ed25519_1.convertPublicKeyToX25519)(Buffer.from(publicKey, 'hex'));
                keypair = (0, nacl_1.generateKeyPair)();
                state = new blake2b_1.BLAKE2b(24);
                nonce = state.update(keypair.publicKey, 32).update(kxOtherPublicKey, 32).digest();
                encryptedMessage = (0, nacl_1.box)(kxOtherPublicKey, keypair.secretKey, nonce, (0, hex_1.isHex)(payload) ? Buffer.from(payload, 'hex') : (0, utf8_1.encode)(payload));
                return [2 /*return*/, toHex((0, bytes_1.concat)(keypair.publicKey, encryptedMessage))];
            });
        });
    };
    Ed25519CryptoClient.prototype.decryptAsymmetric = function (encryptedPayload, keypair) {
        return __awaiter(this, void 0, void 0, function () {
            var kxSelfPrivateKey, kxSelfPublicKey, encryptedPayloadBytes, kxOtherPublicKey, ciphertext, state, nonce, decryptedMessage;
            return __generator(this, function (_a) {
                kxSelfPrivateKey = (0, ed25519_1.convertSecretKeyToX25519)(Buffer.from(keypair.privateKey, 'hex')) // Secret bytes to scalar bytes
                ;
                kxSelfPublicKey = (0, ed25519_1.convertPublicKeyToX25519)(Buffer.from(keypair.publicKey, 'hex')) // Secret bytes to scalar bytes
                ;
                encryptedPayloadBytes = Buffer.from(encryptedPayload, (0, hex_1.isHex)(encryptedPayload) ? 'hex' : 'utf-8');
                kxOtherPublicKey = encryptedPayloadBytes.slice(0, 32);
                ciphertext = encryptedPayloadBytes.slice(32);
                state = new blake2b_1.BLAKE2b(24);
                nonce = state.update(kxOtherPublicKey, 32).update(kxSelfPublicKey, 32).digest();
                decryptedMessage = (0, nacl_1.openBox)(kxOtherPublicKey, kxSelfPrivateKey, nonce, ciphertext);
                if (decryptedMessage === null) {
                    throw new Error('Ed25519 decryption failed.');
                }
                return [2 /*return*/, Buffer.from(decryptedMessage).toString()];
            });
        });
    };
    return Ed25519CryptoClient;
}(CryptoClient_1.CryptoClient));
exports.Ed25519CryptoClient = Ed25519CryptoClient;
//# sourceMappingURL=Ed25519CryptoClient.js.map